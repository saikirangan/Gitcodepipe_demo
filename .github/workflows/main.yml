name: code-pipeline-build-test

on:
  push:
    paths:
      - 'COB/**'
      
jobs:
  generate:
    name: sync & generate & test
    runs-on: [self-hosted, Windows]
    env:
      Win_Topaz_Location: 'C:\Users\sandhata\BMC\WorkbenchCLI'
          
    steps:
      - name: checkout step
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
                                  
      - name: sync step
        uses: bmc-compuware/ispw-sync-local@main
        id: sync
        with:
          host: 'BMC.POPUP-MAINFRAME.COM'
          port: 16196
          uid: ${{ secrets.TSOUSER }}
          pass: ${{ secrets.TSOPASS }}
          runtimeConfiguration: 'ISPT'
          stream: 'PLAY'
          application: 'TEST'
          subAppl: 'TEST'
          checkoutLevel: 'DEV1'
          gitUid: ${{ secrets.GITUID }}
          gitToken: ${{ secrets.GIT_TOKEN }}
          winTopazPath: ${{ env.Win_Topaz_Location }}
          #containerCreation: 'per-branch'
          showEnv: true
          
      
      - name: Get automatic build parameters
        run: echo "automaticBuildJson=${{ steps.sync.outputs.automaticBuildJson }}"
      
      - name: generate step
        uses: bmc-compuware/ispw-generate@main
        id: generate
        if: ${{ steps.sync.outputs.automaticBuildJson != '{}'}}
        with:
          ces_url: 'http://10.10.1.174:48226/'
          ces_token: ${{ secrets.CES_TOKEN }}
          srid: 'ISPT'
          runtime_configuration: 'ISPT'
          generate_automatically: ${{ steps.sync.outputs.automaticBuildJson }}
          
      - name: wait 15 seconds for generate to complete
        run: Start-Sleep -s 15
        shell: powershell       
      
      - name: generate output
        if: success() || failure()
        run: |
          echo "failed count: ${{ steps.generate.outputs.generate_failed_count }}"
          echo "success count: ${{ steps.generate.outputs.generate_success_count }}"
          echo "timeout? ${{ steps.generate.outputs.is_timed_out }} "
          echo "has failure? ${{ steps.generate.outputs.has_failures }}"
          echo "task count: ${{ steps.generate.outputs.task_count }}"
          echo "set id: ${{ steps.generate.outputs.set_id }}"
          echo "url: ${{ steps.generate.outputs.url }}"
          echo "assignment id: ${{ steps.generate.outputs.assignment_id }}"
          
      - name: test
        if:  ${{ steps.generate.outputs.generate_failed_count == 0 }}
        run: ${{ vars.CLIPATH }}\TotalTestFTCLI.bat -data "${{ vars.WORKSPACE }}" -host "${{ vars.HCICONNECTION }}" -port "${{ vars.PORT }}" -u "${{ vars.USERID }}" -p "${{ secrets.HCI_PASSWORD }}" -f "${{ vars.TESTFOLDERPATH }}" --runner-jcl "${{ vars.JCLPATH }}"
          
      - name: Publish Report
        uses: turing85/publish-report@v1
        if: ${{ always() }}
        with:
          comment-header: my-comment-header
          comment-message-success: |
            YAY! {0} passed!  
            
            {1} tests were successful, {2} tests failed, {3} test were skipped.
            
            The report can be found [here]({4}).

          comment-message-failure: |
            On no! {0} failed!  

            {1} tests were successful, {2} tests failed, {3} test were skipped.

            The report can be found [here]({4}).
          report-fail-on-error: true # to fail when tests failed
          report-name: Tests
          report-path: 'C:\Users\sandhata\git\Gitcodepipe_demo\ADDPGM_TESTCASE\Tests\Output'
          report-reporter: java-junit
          
      - name: deploy
        if: ${{ steps.sync.outputs.automaticBuildJson != '{}' && steps.generate.outputs.generate_failed_count == 0}}
        uses: bmc-compuware/ispw-deploy@main
        id: deploy
        with:
          ces_url: 'http://10.10.1.174:48226/'
          ces_token: ${{ secrets.CES_TOKEN }}
          srid: 'ISPT'
          runtime_configuration: 'ISPT'
          deploy_automatically: ${{ steps.sync.outputs.automaticBuildJson }} 
